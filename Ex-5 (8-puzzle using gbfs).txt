# Python code to solve the 8-puzzle problem using greedy best-first search

import copy
from heapq import heappush, heappop

n = 3
rows = [1, 0, -1, 0]
cols = [0, -1, 0, 1]

class PriorityQueue:
    def __init__(self):
        self.heap = []

    def push(self, key):
        heappush(self.heap, key)

    def pop(self):
        return heappop(self.heap)

    def empty(self):
        return not self.heap

class Node:
    def __init__(self, parent, matrix, empty_tile_pos, costs, levels):
        self.parent = parent
        self.matrix = matrix
        self.empty_tile_pos = empty_tile_pos
        self.costs = costs
        self.levels = levels

    def __lt__(self, other):
        return self.costs < other.costs

def calculateCosts(matrix, final):
    count = 0
    for i in range(n):
        for j in range(n):
            if matrix[i][j] and matrix[i][j] != final[i][j]:
                count += 1
    return count

def newNodes(matrix, empty_tile_pos, new_empty_tile_pos, levels, parent, final):
    new_matrix = copy.deepcopy(matrix)
    x1, y1 = empty_tile_pos
    x2, y2 = new_empty_tile_pos
    new_matrix[x1][y1], new_matrix[x2][y2] = new_matrix[x2][y2], new_matrix[x1][y1]
    costs = calculateCosts(new_matrix, final)
    return Node(parent, new_matrix, new_empty_tile_pos, costs, levels)

def isSafe(x, y):
    return 0 <= x < n and 0 <= y < n

def printMatrix(matrix):
    for row in matrix:
        print(*row)

def printPath(root):
    if root is None:
        return
    printPath(root.parent)
    printMatrix(root.matrix)
    print()

def solve(initial, empty_tile_pos, final):
    pq = PriorityQueue()
    costs = calculateCosts(initial, final)
    root = Node(None, initial, empty_tile_pos, costs, 0)
    pq.push(root)

    while not pq.empty():
        minimum = pq.pop()
        if minimum.costs == 0:
            printPath(minimum)
            return

        for i in range(n):
            new_tile_pos = [minimum.empty_tile_pos[0] + rows[i], minimum.empty_tile_pos[1] + cols[i]]
            if isSafe(*new_tile_pos):
                child = newNodes(minimum.matrix, minimum.empty_tile_pos, new_tile_pos, minimum.levels + 1, minimum, final)
                pq.push(child)

# Initial configuration
initial = [[1, 2, 3],
           [5, 6, 0],
           [7, 8, 4]]

# Final configuration
final = [[1, 2, 3],
         [5, 8, 6],
         [0, 7, 4]]

# Blank tile coordinates in the initial configuration
empty_tile_pos = [1, 2]

# Solve the puzzle using greedy best-first search
solve(initial, empty_tile_pos, final)



Output:

1 2 3
5 6 0
7 8 4

1 2 3
5 0 6
7 8 4

1 2 3
5 8 6
7 0 4

1 2 3
5 8 6
0 7 4